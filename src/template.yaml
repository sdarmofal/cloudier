AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  cloudier

  Sample SAM Template for cloudier

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Resources:
  CloudierApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: CloudierApi
      Description: Cloudier API
      StageName: Prod
      Models:
        GatewayRequestModel:
          $schema: "http://json-schema.org/draft-04/schema#"
          type: object
          properties:
            should_fail:
              type: boolean
            weight:
              type: number
              minimum: 1
              maximum: 1000
            length:
              type: number
              minimum: 1
              maximum: 500
            height:
              type: number
              minimum: 1
              maximum: 500
            width:
              type: number
              minimum: 1
              maximum: 500
          required:
            - weight
            - length
            - width
            - height

  GatewayFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: gateway/
      Handler: app.lambda_handler
      Runtime: python3.10
      Environment:
        Variables:
          QUEUE_URL: !GetAtt ValidationQueue.QueueUrl
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt ValidationQueue.QueueName
      Events:
        Gateway:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref CloudierApi
            Path: /gateway
            Method: post
            RequestModel:
              Model: GatewayRequestModel
              Required: true
              ValidateBody: true
  ValidatorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: validator/
      Handler: app.lambda_handler
      Runtime: python3.10
      Environment:
        Variables:
          SNS_EMAIL_TOPIC_ARN: !Ref InvalidShipmentNotification
          SNS_VALID_SHIPMENT_TOPIC_ARN: !Ref ValidShipmentNotification
      Policies:
        - SQSPollerPolicy:
            QueueName: !GetAtt ValidationQueue.QueueName
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt InvalidShipmentNotification.TopicName
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt ValidShipmentNotification.TopicName
      Events:
        ValidatorSQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ValidationQueue.Arn
            BatchSize: 1
  EstimatorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: estimator/
      Handler: app.lambda_handler
      Runtime: python3.10
      Environment:
        Variables:
          SNS_ESTIMATED_SHIPMENT_TOPIC_ARN: !Ref EstimatedShipmentNotification
          SNS_INVALID_SHIPMENT_NOTIFICATION: !Ref InvalidShipmentNotification
      Policies:
        - SQSPollerPolicy:
            QueueName: !GetAtt ValidShipmentsQueue.QueueName
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt EstimatedShipmentNotification.TopicName
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt InvalidShipmentNotification.TopicName
      Events:
        EstimatorSQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ValidShipmentsQueue.Arn
            BatchSize: 1
  ValidationQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ValidationQueue.fifo
      FifoQueue: true
      ContentBasedDeduplication: true
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 3
  OrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: order/
      Handler: app.lambda_handler
      Runtime: python3.10
      Environment:
        Variables:
          RDS_HOST: '{{resolve:secretsmanager:cloudier-database:SecretString:host}}'
          RDS_USERNAME: '{{resolve:secretsmanager:cloudier-database:SecretString:username}}'
          RDS_PASSWORD: '{{resolve:secretsmanager:cloudier-database:SecretString:password}}'
          RDS_PORT: '{{resolve:secretsmanager:cloudier-database:SecretString:port}}'
      Policies:
        - SQSPollerPolicy:
            QueueName: !GetAtt EstimatedShipmentsQueue.QueueName
      Events:
        EstimatedShipmentSQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt EstimatedShipmentsQueue.Arn
            BatchSize: 1
  DeadLetterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dead_letter_processor/
      Handler: app.lambda_handler
      Runtime: python3.10
      Environment:
        Variables:
          SNS_ARN: !Ref InvalidShipmentNotification
      Policies:
        - SQSPollerPolicy:
            QueueName: !GetAtt DeadLetterQueue.QueueName
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt InvalidShipmentNotification.TopicName
      Events:
        DeadLetterSQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt DeadLetterQueue.Arn
            BatchSize: 1

  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: CloudierDeadLetterQueue.fifo
      FifoQueue: true
      ContentBasedDeduplication: true
  ValidShipmentsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ValidShipmentsQueue.fifo
      FifoQueue: true
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 3
  EstimatedShipmentsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: EstimatedShipmentsQueue.fifo
      FifoQueue: true
      ContentBasedDeduplication: true
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 3
  InvalidShipmentNotification:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: InvalidShipmentNotification
      Subscription:
        - Endpoint: '{{resolve:secretsmanager:ShimpentNotificationEmail:SecretString:ShipmentNotificationEmail}}'
          Protocol: email
  ValidShipmentNotification:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: ValidShipmentNotification.fifo
      FifoTopic: true
      Subscription:
        - Endpoint: !GetAtt ValidShipmentsQueue.Arn
          Protocol: SQS
  EstimatedShipmentNotification:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: EstimatedShipmentNotification.fifo
      FifoTopic: true
      ContentBasedDeduplication: true
      Subscription:
        - Endpoint: !GetAtt EstimatedShipmentsQueue.Arn
          Protocol: SQS



  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  CloudierApi:
    Description: API Gateway endpoint URL for Prod stage for Hello World function
    Value: !Sub "https://${CloudierApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/gateway/"
  GatewayFunction:
    Description: Cloudier gateway
    Value: !GetAtt GatewayFunction.Arn
  GatewayFunctionIamRole:
    Description: Implicit IAM Role created for Gateway function
    Value: !GetAtt GatewayFunctionRole.Arn
